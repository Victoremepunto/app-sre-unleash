---
apiVersion: v1
kind: Secret
metadata:
  name: unleash-dbam-{{.package.metadata.name}}-script
  annotations:
    package-operator.run/phase: predeploy
type: Opaque
stringData:
  script.sql: >
    SELECT 'CREATE DATABASE "unleash-{{.package.metadata.name}}"'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'unleash-{{.package.metadata.name}}');\gexec

    REVOKE ALL ON DATABASE "unleash-{{.package.metadata.name}}" FROM public;

    \c "unleash-{{.package.metadata.name}}"

    select 'CREATE ROLE "unleash-{{.package.metadata.name}}"  WITH LOGIN PASSWORD ''AAA_PASSWORD_AAA'' VALID UNTIL ''infinity'''
    WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'unleash-{{.package.metadata.name}}');\gexec

    GRANT TEMPORARY, CONNECT on DATABASE "unleash-{{.package.metadata.name}}" to "unleash-{{.package.metadata.name}}";

    GRANT CONNECT ON DATABASE "unleash-{{.package.metadata.name}}" to "unleash-{{.package.metadata.name}}";
    grant "unleash-{{.package.metadata.name}}" to unleash;
    CREATE SCHEMA IF NOT EXISTS "unleash-{{.package.metadata.name}}" AUTHORIZATION "unleash-{{.package.metadata.name}}";

    commit;
  update_pw.sh: >
    df

    ls -ltr /tmp

    ls -ltr /tmp/original

    ls -ltr /tmp/scripts

    cp /tmp/original/script.sql /tmp/scripts/script.sql

    sed -i "s|AAA_PASSWORD_AAA|$TENANT_PASSWORD|" /tmp/scripts/script.sql 
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
      package-operator.run/phase: predeploy
  name: unleash-dbam-{{.package.metadata.name}}-job
spec:
  backoffLimit: 1
  completions: 1
  template:
    spec:
      initContainers:
        - name: init-script
          image: quay.io/app-sre/postgres:15.4-alpine
          command: 
            - "sh"
            - "/tmp/original/update_pw.sh"
          env:
          - name: TENANT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db.password
                name: "{{.config.unleash.tenant_secret}}"
          volumeMounts:
          - mountPath: /tmp/original/
            name: secret-config
          - mountPath: /tmp/scripts/
            name: config
            readOnly: false
      containers:
      - args:
        - -ae
        - --host=$(db.host)
        - --port=$(db.port)
        - --username=$(db.user)
        - --dbname=$(db.name)
        - --file=/tmp/scripts/script.sql
        command:
        - /usr/local/bin/psql
        env:
        - name: db.host
          valueFrom:
            secretKeyRef:
              key: db.host
              name: "{{.config.db.admin_secret}}"
        - name: db.name
          valueFrom:
            secretKeyRef:
              key: db.name
              name: "{{.config.db.admin_secret}}"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: db.password
              name: "{{.config.db.admin_secret}}"
        - name: db.port
          valueFrom:
            secretKeyRef:
              key: db.port
              name: "{{.config.db.admin_secret}}"
        - name: db.user
          valueFrom:
            secretKeyRef:
              key: db.user
              name: "{{.config.db.admin_secret}}"
        - name: TENANT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: db.password
              name: "{{.config.unleash.tenant_secret}}"
        image: quay.io/app-sre/postgres:15.4-alpine
        name: dbam
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /tmp/scripts/
          name: config
          readOnly: true
      restartPolicy: Never
      serviceAccountName: {{.config.unleash.service_account_name}}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: secret-config
        projected:
          sources:
          - secret:
              name: unleash-dbam-{{.package.metadata.name}}-script
      - name: config
        emptyDir:
          sizeLimit: 1Mi
